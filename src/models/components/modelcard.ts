/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ModelCapabilities,
    ModelCapabilities$inboundSchema,
    ModelCapabilities$Outbound,
    ModelCapabilities$outboundSchema,
} from "./modelcapabilities.js";
import * as z from "zod";

export type ModelCard = {
    id: string;
    object?: string | undefined;
    created?: number | undefined;
    ownedBy?: string | undefined;
    root?: string | null | undefined;
    archived?: boolean | undefined;
    name?: string | null | undefined;
    description?: string | null | undefined;
    capabilities: ModelCapabilities;
    maxContextLength?: number | undefined;
    aliases?: Array<string> | undefined;
    deprecation?: Date | null | undefined;
};

/** @internal */
export const ModelCard$inboundSchema: z.ZodType<ModelCard, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string(),
        object: z.string().default("model"),
        created: z.number().int().optional(),
        owned_by: z.string().default("mistralai"),
        root: z.nullable(z.string()).optional(),
        archived: z.boolean().default(false),
        name: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        capabilities: ModelCapabilities$inboundSchema,
        max_context_length: z.number().int().default(32768),
        aliases: z.array(z.string()).optional(),
        deprecation: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            owned_by: "ownedBy",
            max_context_length: "maxContextLength",
        });
    });

/** @internal */
export type ModelCard$Outbound = {
    id: string;
    object: string;
    created?: number | undefined;
    owned_by: string;
    root?: string | null | undefined;
    archived: boolean;
    name?: string | null | undefined;
    description?: string | null | undefined;
    capabilities: ModelCapabilities$Outbound;
    max_context_length: number;
    aliases?: Array<string> | undefined;
    deprecation?: string | null | undefined;
};

/** @internal */
export const ModelCard$outboundSchema: z.ZodType<ModelCard$Outbound, z.ZodTypeDef, ModelCard> = z
    .object({
        id: z.string(),
        object: z.string().default("model"),
        created: z.number().int().optional(),
        ownedBy: z.string().default("mistralai"),
        root: z.nullable(z.string()).optional(),
        archived: z.boolean().default(false),
        name: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        capabilities: ModelCapabilities$outboundSchema,
        maxContextLength: z.number().int().default(32768),
        aliases: z.array(z.string()).optional(),
        deprecation: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ownedBy: "owned_by",
            maxContextLength: "max_context_length",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelCard$ {
    /** @deprecated use `ModelCard$inboundSchema` instead. */
    export const inboundSchema = ModelCard$inboundSchema;
    /** @deprecated use `ModelCard$outboundSchema` instead. */
    export const outboundSchema = ModelCard$outboundSchema;
    /** @deprecated use `ModelCard$Outbound` instead. */
    export type Outbound = ModelCard$Outbound;
}

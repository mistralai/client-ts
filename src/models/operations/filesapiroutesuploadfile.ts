/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { blobLikeSchema } from "../../types/blobs.js";
import * as components from "../components/index.js";

export type FileT = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type FilesApiRoutesUploadFileMultiPartBodyParams = {
  /**
   * The File object (not file name) to be uploaded.
   *
   * @remarks
   *  To upload a file and specify a custom file name you should format your request as such:
   *  ```bash
   *  file=@path/to/your/file.jsonl;filename=custom_name.jsonl
   *  ```
   *  Otherwise, you can just keep the original file name:
   *  ```bash
   *  file=@path/to/your/file.jsonl
   *  ```
   */
  file: FileT | Blob;
  purpose?: components.FilePurpose | undefined;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type FileT$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

/** @internal */
export const FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema:
  z.ZodType<
    FilesApiRoutesUploadFileMultiPartBodyParams,
    z.ZodTypeDef,
    unknown
  > = z.object({
    file: z.lazy(() => FileT$inboundSchema),
    purpose: components.FilePurpose$inboundSchema.optional(),
  });

/** @internal */
export type FilesApiRoutesUploadFileMultiPartBodyParams$Outbound = {
  file: FileT$Outbound | Blob;
  purpose?: string | undefined;
};

/** @internal */
export const FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema:
  z.ZodType<
    FilesApiRoutesUploadFileMultiPartBodyParams$Outbound,
    z.ZodTypeDef,
    FilesApiRoutesUploadFileMultiPartBodyParams
  > = z.object({
    file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
    purpose: components.FilePurpose$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesApiRoutesUploadFileMultiPartBodyParams$ {
  /** @deprecated use `FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema` instead. */
  export const inboundSchema =
    FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema;
  /** @deprecated use `FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema` instead. */
  export const outboundSchema =
    FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema;
  /** @deprecated use `FilesApiRoutesUploadFileMultiPartBodyParams$Outbound` instead. */
  export type Outbound = FilesApiRoutesUploadFileMultiPartBodyParams$Outbound;
}

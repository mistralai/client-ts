/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export const Purpose = {
    FineTune: "fine-tune",
} as const;
export type Purpose = OpenEnum<typeof Purpose>;

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type FilesApiRoutesUploadFileMultiPartBodyParams = {
    /**
     * The File object (not file name) to be uploaded.
     *
     * @remarks
     *  To upload a file and specify a custom file name you should format your request as such:
     *  ```bash
     *  file=@path/to/your/file.jsonl;filename=custom_name.jsonl
     *  ```
     *  Otherwise, you can just keep the original file name:
     *  ```bash
     *  file=@path/to/your/file.jsonl
     *  ```
     */
    file: FileT | Blob;
    purpose?: "fine-tune" | undefined;
};

/** @internal */
export const Purpose$inboundSchema: z.ZodType<Purpose, z.ZodTypeDef, unknown> = z.union([
    z.nativeEnum(Purpose),
    z.string().transform(catchUnrecognizedEnum),
]);

/** @internal */
export const Purpose$outboundSchema: z.ZodType<Purpose, z.ZodTypeDef, Purpose> = z.union([
    z.nativeEnum(Purpose),
    z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Purpose$ {
    /** @deprecated use `Purpose$inboundSchema` instead. */
    export const inboundSchema = Purpose$inboundSchema;
    /** @deprecated use `Purpose$outboundSchema` instead. */
    export const outboundSchema = Purpose$outboundSchema;
}

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
    fileName: z.string(),
    content: b64$.zodInbound,
});

/** @internal */
export type FileT$Outbound = {
    fileName: string;
    content: Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT> = z.object({
    fileName: z.string(),
    content: b64$.zodOutbound,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    export const inboundSchema = FileT$inboundSchema;
    /** @deprecated use `FileT$outboundSchema` instead. */
    export const outboundSchema = FileT$outboundSchema;
    /** @deprecated use `FileT$Outbound` instead. */
    export type Outbound = FileT$Outbound;
}

/** @internal */
export const FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema: z.ZodType<
    FilesApiRoutesUploadFileMultiPartBodyParams,
    z.ZodTypeDef,
    unknown
> = z.object({
    file: z.lazy(() => FileT$inboundSchema),
    purpose: z.literal("fine-tune").default("fine-tune"),
});

/** @internal */
export type FilesApiRoutesUploadFileMultiPartBodyParams$Outbound = {
    file: FileT$Outbound | Blob;
    purpose: "fine-tune";
};

/** @internal */
export const FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema: z.ZodType<
    FilesApiRoutesUploadFileMultiPartBodyParams$Outbound,
    z.ZodTypeDef,
    FilesApiRoutesUploadFileMultiPartBodyParams
> = z.object({
    file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
    purpose: z.literal("fine-tune").default("fine-tune"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesApiRoutesUploadFileMultiPartBodyParams$ {
    /** @deprecated use `FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema` instead. */
    export const inboundSchema = FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema;
    /** @deprecated use `FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema` instead. */
    export const outboundSchema = FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema;
    /** @deprecated use `FilesApiRoutesUploadFileMultiPartBodyParams$Outbound` instead. */
    export type Outbound = FilesApiRoutesUploadFileMultiPartBodyParams$Outbound;
}

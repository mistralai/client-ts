/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  AssistantMessage,
  AssistantMessage$inboundSchema,
  AssistantMessage$Outbound,
  AssistantMessage$outboundSchema,
} from "./assistantmessage.js";
import {
  ResponseFormat,
  ResponseFormat$inboundSchema,
  ResponseFormat$Outbound,
  ResponseFormat$outboundSchema,
} from "./responseformat.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";
import {
  ToolChoice,
  ToolChoice$inboundSchema,
  ToolChoice$Outbound,
  ToolChoice$outboundSchema,
} from "./toolchoice.js";
import {
  ToolChoiceEnum,
  ToolChoiceEnum$inboundSchema,
  ToolChoiceEnum$outboundSchema,
} from "./toolchoiceenum.js";
import {
  ToolMessage,
  ToolMessage$inboundSchema,
  ToolMessage$Outbound,
  ToolMessage$outboundSchema,
} from "./toolmessage.js";
import {
  UserMessage,
  UserMessage$inboundSchema,
  UserMessage$Outbound,
  UserMessage$outboundSchema,
} from "./usermessage.js";

/**
 * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
 */
export type AgentsCompletionStreamRequestStop = string | Array<string>;

export type AgentsCompletionStreamRequestMessages =
  | (UserMessage & { role: "user" })
  | (AssistantMessage & { role: "assistant" })
  | (ToolMessage & { role: "tool" });

export type AgentsCompletionStreamRequestToolChoice =
  | ToolChoice
  | ToolChoiceEnum;

export type AgentsCompletionStreamRequest = {
  /**
   * The maximum number of tokens to generate in the completion. The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
   */
  maxTokens?: number | null | undefined;
  /**
   * The minimum number of tokens to generate in the completion.
   */
  minTokens?: number | null | undefined;
  stream?: boolean | undefined;
  /**
   * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
   */
  stop?: string | Array<string> | undefined;
  /**
   * The seed to use for random sampling. If set, different calls will generate deterministic results.
   */
  randomSeed?: number | null | undefined;
  /**
   * The prompt(s) to generate completions for, encoded as a list of dict with role and content.
   */
  messages: Array<
    | (UserMessage & { role: "user" })
    | (AssistantMessage & { role: "assistant" })
    | (ToolMessage & { role: "tool" })
  >;
  responseFormat?: ResponseFormat | undefined;
  tools?: Array<Tool> | null | undefined;
  toolChoice?: ToolChoice | ToolChoiceEnum | undefined;
  /**
   * The ID of the agent to use for this completion.
   */
  agentId: string;
};

/** @internal */
export const AgentsCompletionStreamRequestStop$inboundSchema: z.ZodType<
  AgentsCompletionStreamRequestStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type AgentsCompletionStreamRequestStop$Outbound = string | Array<string>;

/** @internal */
export const AgentsCompletionStreamRequestStop$outboundSchema: z.ZodType<
  AgentsCompletionStreamRequestStop$Outbound,
  z.ZodTypeDef,
  AgentsCompletionStreamRequestStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentsCompletionStreamRequestStop$ {
  /** @deprecated use `AgentsCompletionStreamRequestStop$inboundSchema` instead. */
  export const inboundSchema = AgentsCompletionStreamRequestStop$inboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequestStop$outboundSchema` instead. */
  export const outboundSchema =
    AgentsCompletionStreamRequestStop$outboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequestStop$Outbound` instead. */
  export type Outbound = AgentsCompletionStreamRequestStop$Outbound;
}

/** @internal */
export const AgentsCompletionStreamRequestMessages$inboundSchema: z.ZodType<
  AgentsCompletionStreamRequestMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  UserMessage$inboundSchema.and(
    z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role })),
  ),
  AssistantMessage$inboundSchema.and(
    z.object({ role: z.literal("assistant") }).transform((v) => ({
      role: v.role,
    })),
  ),
  ToolMessage$inboundSchema.and(
    z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })),
  ),
]);

/** @internal */
export type AgentsCompletionStreamRequestMessages$Outbound =
  | (UserMessage$Outbound & { role: "user" })
  | (AssistantMessage$Outbound & { role: "assistant" })
  | (ToolMessage$Outbound & { role: "tool" });

/** @internal */
export const AgentsCompletionStreamRequestMessages$outboundSchema: z.ZodType<
  AgentsCompletionStreamRequestMessages$Outbound,
  z.ZodTypeDef,
  AgentsCompletionStreamRequestMessages
> = z.union([
  UserMessage$outboundSchema.and(
    z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role })),
  ),
  AssistantMessage$outboundSchema.and(
    z.object({ role: z.literal("assistant") }).transform((v) => ({
      role: v.role,
    })),
  ),
  ToolMessage$outboundSchema.and(
    z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentsCompletionStreamRequestMessages$ {
  /** @deprecated use `AgentsCompletionStreamRequestMessages$inboundSchema` instead. */
  export const inboundSchema =
    AgentsCompletionStreamRequestMessages$inboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequestMessages$outboundSchema` instead. */
  export const outboundSchema =
    AgentsCompletionStreamRequestMessages$outboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequestMessages$Outbound` instead. */
  export type Outbound = AgentsCompletionStreamRequestMessages$Outbound;
}

/** @internal */
export const AgentsCompletionStreamRequestToolChoice$inboundSchema: z.ZodType<
  AgentsCompletionStreamRequestToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema]);

/** @internal */
export type AgentsCompletionStreamRequestToolChoice$Outbound =
  | ToolChoice$Outbound
  | string;

/** @internal */
export const AgentsCompletionStreamRequestToolChoice$outboundSchema: z.ZodType<
  AgentsCompletionStreamRequestToolChoice$Outbound,
  z.ZodTypeDef,
  AgentsCompletionStreamRequestToolChoice
> = z.union([ToolChoice$outboundSchema, ToolChoiceEnum$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentsCompletionStreamRequestToolChoice$ {
  /** @deprecated use `AgentsCompletionStreamRequestToolChoice$inboundSchema` instead. */
  export const inboundSchema =
    AgentsCompletionStreamRequestToolChoice$inboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequestToolChoice$outboundSchema` instead. */
  export const outboundSchema =
    AgentsCompletionStreamRequestToolChoice$outboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequestToolChoice$Outbound` instead. */
  export type Outbound = AgentsCompletionStreamRequestToolChoice$Outbound;
}

/** @internal */
export const AgentsCompletionStreamRequest$inboundSchema: z.ZodType<
  AgentsCompletionStreamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_tokens: z.nullable(z.number().int()).optional(),
  min_tokens: z.nullable(z.number().int()).optional(),
  stream: z.boolean().default(true),
  stop: z.union([z.string(), z.array(z.string())]).optional(),
  random_seed: z.nullable(z.number().int()).optional(),
  messages: z.array(
    z.union([
      UserMessage$inboundSchema.and(
        z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role,
        })),
      ),
      AssistantMessage$inboundSchema.and(
        z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role,
        })),
      ),
      ToolMessage$inboundSchema.and(
        z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role,
        })),
      ),
    ]),
  ),
  response_format: ResponseFormat$inboundSchema.optional(),
  tools: z.nullable(z.array(Tool$inboundSchema)).optional(),
  tool_choice: z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema])
    .optional(),
  agent_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "min_tokens": "minTokens",
    "random_seed": "randomSeed",
    "response_format": "responseFormat",
    "tool_choice": "toolChoice",
    "agent_id": "agentId",
  });
});

/** @internal */
export type AgentsCompletionStreamRequest$Outbound = {
  max_tokens?: number | null | undefined;
  min_tokens?: number | null | undefined;
  stream: boolean;
  stop?: string | Array<string> | undefined;
  random_seed?: number | null | undefined;
  messages: Array<
    | (UserMessage$Outbound & { role: "user" })
    | (AssistantMessage$Outbound & { role: "assistant" })
    | (ToolMessage$Outbound & { role: "tool" })
  >;
  response_format?: ResponseFormat$Outbound | undefined;
  tools?: Array<Tool$Outbound> | null | undefined;
  tool_choice?: ToolChoice$Outbound | string | undefined;
  agent_id: string;
};

/** @internal */
export const AgentsCompletionStreamRequest$outboundSchema: z.ZodType<
  AgentsCompletionStreamRequest$Outbound,
  z.ZodTypeDef,
  AgentsCompletionStreamRequest
> = z.object({
  maxTokens: z.nullable(z.number().int()).optional(),
  minTokens: z.nullable(z.number().int()).optional(),
  stream: z.boolean().default(true),
  stop: z.union([z.string(), z.array(z.string())]).optional(),
  randomSeed: z.nullable(z.number().int()).optional(),
  messages: z.array(
    z.union([
      UserMessage$outboundSchema.and(
        z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role,
        })),
      ),
      AssistantMessage$outboundSchema.and(
        z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role,
        })),
      ),
      ToolMessage$outboundSchema.and(
        z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role,
        })),
      ),
    ]),
  ),
  responseFormat: ResponseFormat$outboundSchema.optional(),
  tools: z.nullable(z.array(Tool$outboundSchema)).optional(),
  toolChoice: z.union([
    ToolChoice$outboundSchema,
    ToolChoiceEnum$outboundSchema,
  ]).optional(),
  agentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    minTokens: "min_tokens",
    randomSeed: "random_seed",
    responseFormat: "response_format",
    toolChoice: "tool_choice",
    agentId: "agent_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentsCompletionStreamRequest$ {
  /** @deprecated use `AgentsCompletionStreamRequest$inboundSchema` instead. */
  export const inboundSchema = AgentsCompletionStreamRequest$inboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequest$outboundSchema` instead. */
  export const outboundSchema = AgentsCompletionStreamRequest$outboundSchema;
  /** @deprecated use `AgentsCompletionStreamRequest$Outbound` instead. */
  export type Outbound = AgentsCompletionStreamRequest$Outbound;
}

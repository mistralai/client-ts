/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Arguments = { [k: string]: any } | string;

export type FunctionCall = {
  name: string;
  arguments: { [k: string]: any } | string;
};

/** @internal */
export const Arguments$inboundSchema: z.ZodType<
  Arguments,
  z.ZodTypeDef,
  unknown
> = z.union([z.record(z.any()), z.string()]);

/** @internal */
export type Arguments$Outbound = { [k: string]: any } | string;

/** @internal */
export const Arguments$outboundSchema: z.ZodType<
  Arguments$Outbound,
  z.ZodTypeDef,
  Arguments
> = z.union([z.record(z.any()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Arguments$ {
  /** @deprecated use `Arguments$inboundSchema` instead. */
  export const inboundSchema = Arguments$inboundSchema;
  /** @deprecated use `Arguments$outboundSchema` instead. */
  export const outboundSchema = Arguments$outboundSchema;
  /** @deprecated use `Arguments$Outbound` instead. */
  export type Outbound = Arguments$Outbound;
}

/** @internal */
export const FunctionCall$inboundSchema: z.ZodType<
  FunctionCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.union([z.record(z.any()), z.string()]),
});

/** @internal */
export type FunctionCall$Outbound = {
  name: string;
  arguments: { [k: string]: any } | string;
};

/** @internal */
export const FunctionCall$outboundSchema: z.ZodType<
  FunctionCall$Outbound,
  z.ZodTypeDef,
  FunctionCall
> = z.object({
  name: z.string(),
  arguments: z.union([z.record(z.any()), z.string()]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionCall$ {
  /** @deprecated use `FunctionCall$inboundSchema` instead. */
  export const inboundSchema = FunctionCall$inboundSchema;
  /** @deprecated use `FunctionCall$outboundSchema` instead. */
  export const outboundSchema = FunctionCall$outboundSchema;
  /** @deprecated use `FunctionCall$Outbound` instead. */
  export type Outbound = FunctionCall$Outbound;
}

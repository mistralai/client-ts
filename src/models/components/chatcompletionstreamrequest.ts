/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  AssistantMessage,
  AssistantMessage$inboundSchema,
  AssistantMessage$Outbound,
  AssistantMessage$outboundSchema,
} from "./assistantmessage.js";
import {
  ResponseFormat,
  ResponseFormat$inboundSchema,
  ResponseFormat$Outbound,
  ResponseFormat$outboundSchema,
} from "./responseformat.js";
import {
  SystemMessage,
  SystemMessage$inboundSchema,
  SystemMessage$Outbound,
  SystemMessage$outboundSchema,
} from "./systemmessage.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";
import {
  ToolChoice,
  ToolChoice$inboundSchema,
  ToolChoice$Outbound,
  ToolChoice$outboundSchema,
} from "./toolchoice.js";
import {
  ToolChoiceEnum,
  ToolChoiceEnum$inboundSchema,
  ToolChoiceEnum$outboundSchema,
} from "./toolchoiceenum.js";
import {
  ToolMessage,
  ToolMessage$inboundSchema,
  ToolMessage$Outbound,
  ToolMessage$outboundSchema,
} from "./toolmessage.js";
import {
  UserMessage,
  UserMessage$inboundSchema,
  UserMessage$Outbound,
  UserMessage$outboundSchema,
} from "./usermessage.js";

/**
 * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
 */
export type ChatCompletionStreamRequestStop = string | Array<string>;

export type ChatCompletionStreamRequestMessages =
  | (SystemMessage & { role: "system" })
  | (UserMessage & { role: "user" })
  | (AssistantMessage & { role: "assistant" })
  | (ToolMessage & { role: "tool" });

export type ChatCompletionStreamRequestToolChoice = ToolChoice | ToolChoiceEnum;

export type ChatCompletionStreamRequest = {
  /**
   * ID of the model to use. You can use the [List Available Models](/api/#tag/models/operation/list_models_v1_models_get) API to see all of your available models, or see our [Model overview](/models) for model descriptions.
   */
  model: string | null;
  /**
   * What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.
   */
  temperature?: number | undefined;
  /**
   * Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both.
   */
  topP?: number | undefined;
  /**
   * The maximum number of tokens to generate in the completion. The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
   */
  maxTokens?: number | null | undefined;
  /**
   * The minimum number of tokens to generate in the completion.
   */
  minTokens?: number | null | undefined;
  stream?: boolean | undefined;
  /**
   * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
   */
  stop?: string | Array<string> | undefined;
  /**
   * The seed to use for random sampling. If set, different calls will generate deterministic results.
   */
  randomSeed?: number | null | undefined;
  /**
   * The prompt(s) to generate completions for, encoded as a list of dict with role and content.
   */
  messages: Array<
    | (SystemMessage & { role: "system" })
    | (UserMessage & { role: "user" })
    | (AssistantMessage & { role: "assistant" })
    | (ToolMessage & { role: "tool" })
  >;
  responseFormat?: ResponseFormat | undefined;
  tools?: Array<Tool> | null | undefined;
  toolChoice?: ToolChoice | ToolChoiceEnum | undefined;
  /**
   * Whether to inject a safety prompt before all conversations.
   */
  safePrompt?: boolean | undefined;
};

/** @internal */
export const ChatCompletionStreamRequestStop$inboundSchema: z.ZodType<
  ChatCompletionStreamRequestStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ChatCompletionStreamRequestStop$Outbound = string | Array<string>;

/** @internal */
export const ChatCompletionStreamRequestStop$outboundSchema: z.ZodType<
  ChatCompletionStreamRequestStop$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamRequestStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamRequestStop$ {
  /** @deprecated use `ChatCompletionStreamRequestStop$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamRequestStop$inboundSchema;
  /** @deprecated use `ChatCompletionStreamRequestStop$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamRequestStop$outboundSchema;
  /** @deprecated use `ChatCompletionStreamRequestStop$Outbound` instead. */
  export type Outbound = ChatCompletionStreamRequestStop$Outbound;
}

/** @internal */
export const ChatCompletionStreamRequestMessages$inboundSchema: z.ZodType<
  ChatCompletionStreamRequestMessages,
  z.ZodTypeDef,
  unknown
> = z.union([
  SystemMessage$inboundSchema.and(
    z.object({ role: z.literal("system") }).transform((v) => ({
      role: v.role,
    })),
  ),
  UserMessage$inboundSchema.and(
    z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role })),
  ),
  AssistantMessage$inboundSchema.and(
    z.object({ role: z.literal("assistant") }).transform((v) => ({
      role: v.role,
    })),
  ),
  ToolMessage$inboundSchema.and(
    z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })),
  ),
]);

/** @internal */
export type ChatCompletionStreamRequestMessages$Outbound =
  | (SystemMessage$Outbound & { role: "system" })
  | (UserMessage$Outbound & { role: "user" })
  | (AssistantMessage$Outbound & { role: "assistant" })
  | (ToolMessage$Outbound & { role: "tool" });

/** @internal */
export const ChatCompletionStreamRequestMessages$outboundSchema: z.ZodType<
  ChatCompletionStreamRequestMessages$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamRequestMessages
> = z.union([
  SystemMessage$outboundSchema.and(
    z.object({ role: z.literal("system") }).transform((v) => ({
      role: v.role,
    })),
  ),
  UserMessage$outboundSchema.and(
    z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role })),
  ),
  AssistantMessage$outboundSchema.and(
    z.object({ role: z.literal("assistant") }).transform((v) => ({
      role: v.role,
    })),
  ),
  ToolMessage$outboundSchema.and(
    z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamRequestMessages$ {
  /** @deprecated use `ChatCompletionStreamRequestMessages$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamRequestMessages$inboundSchema;
  /** @deprecated use `ChatCompletionStreamRequestMessages$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamRequestMessages$outboundSchema;
  /** @deprecated use `ChatCompletionStreamRequestMessages$Outbound` instead. */
  export type Outbound = ChatCompletionStreamRequestMessages$Outbound;
}

/** @internal */
export const ChatCompletionStreamRequestToolChoice$inboundSchema: z.ZodType<
  ChatCompletionStreamRequestToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema]);

/** @internal */
export type ChatCompletionStreamRequestToolChoice$Outbound =
  | ToolChoice$Outbound
  | string;

/** @internal */
export const ChatCompletionStreamRequestToolChoice$outboundSchema: z.ZodType<
  ChatCompletionStreamRequestToolChoice$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamRequestToolChoice
> = z.union([ToolChoice$outboundSchema, ToolChoiceEnum$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamRequestToolChoice$ {
  /** @deprecated use `ChatCompletionStreamRequestToolChoice$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamRequestToolChoice$inboundSchema;
  /** @deprecated use `ChatCompletionStreamRequestToolChoice$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamRequestToolChoice$outboundSchema;
  /** @deprecated use `ChatCompletionStreamRequestToolChoice$Outbound` instead. */
  export type Outbound = ChatCompletionStreamRequestToolChoice$Outbound;
}

/** @internal */
export const ChatCompletionStreamRequest$inboundSchema: z.ZodType<
  ChatCompletionStreamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.nullable(z.string()),
  temperature: z.number().default(0.7),
  top_p: z.number().default(1),
  max_tokens: z.nullable(z.number().int()).optional(),
  min_tokens: z.nullable(z.number().int()).optional(),
  stream: z.boolean().default(true),
  stop: z.union([z.string(), z.array(z.string())]).optional(),
  random_seed: z.nullable(z.number().int()).optional(),
  messages: z.array(
    z.union([
      SystemMessage$inboundSchema.and(
        z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role,
        })),
      ),
      UserMessage$inboundSchema.and(
        z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role,
        })),
      ),
      AssistantMessage$inboundSchema.and(
        z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role,
        })),
      ),
      ToolMessage$inboundSchema.and(
        z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role,
        })),
      ),
    ]),
  ),
  response_format: ResponseFormat$inboundSchema.optional(),
  tools: z.nullable(z.array(Tool$inboundSchema)).optional(),
  tool_choice: z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema])
    .optional(),
  safe_prompt: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "top_p": "topP",
    "max_tokens": "maxTokens",
    "min_tokens": "minTokens",
    "random_seed": "randomSeed",
    "response_format": "responseFormat",
    "tool_choice": "toolChoice",
    "safe_prompt": "safePrompt",
  });
});

/** @internal */
export type ChatCompletionStreamRequest$Outbound = {
  model: string | null;
  temperature: number;
  top_p: number;
  max_tokens?: number | null | undefined;
  min_tokens?: number | null | undefined;
  stream: boolean;
  stop?: string | Array<string> | undefined;
  random_seed?: number | null | undefined;
  messages: Array<
    | (SystemMessage$Outbound & { role: "system" })
    | (UserMessage$Outbound & { role: "user" })
    | (AssistantMessage$Outbound & { role: "assistant" })
    | (ToolMessage$Outbound & { role: "tool" })
  >;
  response_format?: ResponseFormat$Outbound | undefined;
  tools?: Array<Tool$Outbound> | null | undefined;
  tool_choice?: ToolChoice$Outbound | string | undefined;
  safe_prompt: boolean;
};

/** @internal */
export const ChatCompletionStreamRequest$outboundSchema: z.ZodType<
  ChatCompletionStreamRequest$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamRequest
> = z.object({
  model: z.nullable(z.string()),
  temperature: z.number().default(0.7),
  topP: z.number().default(1),
  maxTokens: z.nullable(z.number().int()).optional(),
  minTokens: z.nullable(z.number().int()).optional(),
  stream: z.boolean().default(true),
  stop: z.union([z.string(), z.array(z.string())]).optional(),
  randomSeed: z.nullable(z.number().int()).optional(),
  messages: z.array(
    z.union([
      SystemMessage$outboundSchema.and(
        z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role,
        })),
      ),
      UserMessage$outboundSchema.and(
        z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role,
        })),
      ),
      AssistantMessage$outboundSchema.and(
        z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role,
        })),
      ),
      ToolMessage$outboundSchema.and(
        z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role,
        })),
      ),
    ]),
  ),
  responseFormat: ResponseFormat$outboundSchema.optional(),
  tools: z.nullable(z.array(Tool$outboundSchema)).optional(),
  toolChoice: z.union([
    ToolChoice$outboundSchema,
    ToolChoiceEnum$outboundSchema,
  ]).optional(),
  safePrompt: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    topP: "top_p",
    maxTokens: "max_tokens",
    minTokens: "min_tokens",
    randomSeed: "random_seed",
    responseFormat: "response_format",
    toolChoice: "tool_choice",
    safePrompt: "safe_prompt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamRequest$ {
  /** @deprecated use `ChatCompletionStreamRequest$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamRequest$inboundSchema;
  /** @deprecated use `ChatCompletionStreamRequest$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamRequest$outboundSchema;
  /** @deprecated use `ChatCompletionStreamRequest$Outbound` instead. */
  export type Outbound = ChatCompletionStreamRequest$Outbound;
}

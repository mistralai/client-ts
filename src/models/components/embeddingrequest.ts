/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Text to embed.
 */
export type Inputs = string | Array<string>;

export type EmbeddingRequest = {
  /**
   * Text to embed.
   */
  inputs: string | Array<string>;
  /**
   * ID of the model to use.
   */
  model: string;
  /**
   * The format to return the embeddings in.
   */
  encodingFormat?: string | null | undefined;
};

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Inputs$Outbound = string | Array<string>;

/** @internal */
export const Inputs$outboundSchema: z.ZodType<
  Inputs$Outbound,
  z.ZodTypeDef,
  Inputs
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
  /** @deprecated use `Inputs$inboundSchema` instead. */
  export const inboundSchema = Inputs$inboundSchema;
  /** @deprecated use `Inputs$outboundSchema` instead. */
  export const outboundSchema = Inputs$outboundSchema;
  /** @deprecated use `Inputs$Outbound` instead. */
  export type Outbound = Inputs$Outbound;
}

/** @internal */
export const EmbeddingRequest$inboundSchema: z.ZodType<
  EmbeddingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string(),
  encoding_format: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "input": "inputs",
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type EmbeddingRequest$Outbound = {
  input: string | Array<string>;
  model: string;
  encoding_format?: string | null | undefined;
};

/** @internal */
export const EmbeddingRequest$outboundSchema: z.ZodType<
  EmbeddingRequest$Outbound,
  z.ZodTypeDef,
  EmbeddingRequest
> = z.object({
  inputs: z.union([z.string(), z.array(z.string())]),
  model: z.string(),
  encodingFormat: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    inputs: "input",
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingRequest$ {
  /** @deprecated use `EmbeddingRequest$inboundSchema` instead. */
  export const inboundSchema = EmbeddingRequest$inboundSchema;
  /** @deprecated use `EmbeddingRequest$outboundSchema` instead. */
  export const outboundSchema = EmbeddingRequest$outboundSchema;
  /** @deprecated use `EmbeddingRequest$Outbound` instead. */
  export type Outbound = EmbeddingRequest$Outbound;
}
